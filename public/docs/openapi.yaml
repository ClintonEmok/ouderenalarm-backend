openapi: 3.0.3
info:
  title: 'Ouderenalarm API'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'https://api.ouderen-alarmering.nl'
paths:
  /api/register:
    post:
      summary: 'Register a new user and return an access token'
      operationId: registerANewUserAndReturnAnAccessToken
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Registration successful'
                  access_token: 1|xyz...
                  user:
                    id: 1
                    name: 'John Doe'
                    email: john@example.com
                properties:
                  message:
                    type: string
                    example: 'Registration successful'
                  access_token:
                    type: string
                    example: 1|xyz...
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        example: john@example.com
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "The user's name."
                  example: 'John Doe'
                  nullable: false
                email:
                  type: string
                  description: "The user's email. Must be unique."
                  example: john@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The password (min: 8).'
                  example: password123
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Must match password.'
                  example: password123
                  nullable: false
              required:
                - name
                - email
                - password
                - password_confirmation
      security: []
  /api/login:
    post:
      summary: 'Login for Mobile/API Users (Token-based)'
      operationId: loginForMobileAPIUsersTokenBased
      description: 'This endpoint logs in users using Laravel Sanctum and returns an access token.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Login successful'
                  access_token: 1|e3PDeODU1v6Fw7zUb1DQcqNfXk7LJACXfiHVAmk2
                  user:
                    id: 1
                    name: 'John Doe'
                    email: user@example.com
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                  access_token:
                    type: string
                    example: 1|e3PDeODU1v6Fw7zUb1DQcqNfXk7LJACXfiHVAmk2
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        example: user@example.com
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The user's email."
                  example: user@example.com
                  nullable: false
                password:
                  type: string
                  description: "The user's password."
                  example: password123
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/logout:
    post:
      summary: 'Logout for Mobile/API Users (Token-based)'
      operationId: logoutForMobileAPIUsersTokenBased
      description: 'This endpoint revokes the current access token for the authenticated user.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Logout successful'
                properties:
                  message:
                    type: string
                    example: 'Logout successful'
      tags:
        - Authentication
  /api/invites/validate:
    get:
      summary: 'Validate an invite token (for public use in registration flows)'
      operationId: validateAnInviteTokenforPublicUseInRegistrationFlows
      description: ''
      parameters:
        -
          in: query
          name: token
          description: 'The invite token.'
          example: abc-123
          required: true
          schema:
            type: string
            description: 'The invite token.'
            example: abc-123
            nullable: false
      responses:
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Failed to validate token.'
                  error: 'No query results for model [App\Models\Invite].'
                properties:
                  message:
                    type: string
                    example: 'Failed to validate token.'
                  error:
                    type: string
                    example: 'No query results for model [App\Models\Invite].'
      tags:
        - Caregivers
      security: []
  /api/caregivers/invite:
    post:
      summary: 'Invite a user to be your caregiver by email'
      operationId: inviteAUserToBeYourCaregiverByEmail
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Caregivers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email of the invited caregiver.'
                  example: test@example.com
                  nullable: false
              required:
                - email
  /api/caregivers/accept:
    post:
      summary: 'Accept a caregiver invitation and register if needed'
      operationId: acceptACaregiverInvitationAndRegisterIfNeeded
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Caregivers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The invitation token.'
                  example: abc-123
                  nullable: false
                name:
                  type: string
                  description: 'Your name.'
                  example: 'Jane Doe'
                  nullable: false
                password:
                  type: string
                  description: 'Your password.'
                  example: secret123
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Confirm password.'
                  example: secret123
                  nullable: false
              required:
                - token
                - name
                - password
                - password_confirmation
  /api/caregivers/remove:
    post:
      summary: 'Remove a caregiver-patient relationship'
      operationId: removeACaregiverPatientRelationship
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Caregivers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'The ID of the other party.'
                  example: 5
                  nullable: false
              required:
                - user_id
  /api/caregivers/invites/pending:
    get:
      summary: 'List pending invites sent by the authenticated user'
      operationId: listPendingInvitesSentByTheAuthenticatedUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Caregivers
  /api/caregivers/reorder:
    patch:
      summary: 'Reorder caregivers by priority'
      operationId: reorderCaregiversByPriority
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Caregivers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                caregiver_ids:
                  type: array
                  description: 'Ordered caregiver IDs.'
                  example:
                    - 12
                    - 7
                    - 4
                  items:
                    type: string
              required:
                - caregiver_ids
  /api/device-alarms:
    get:
      summary: 'List relevant device alarms'
      operationId: listRelevantDeviceAlarms
      description: "Returns alarms that are either fall or SOS alerts, including basic device and user info,\nand a list of caregivers currently en route."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"data\": [\n    {\n      \"id\": 42,\n      \"created_at\": \"2025-05-30 12:34:56\",\n      \"triggered_alerts\": \"Valalarm, Noodoproep\",\n      \"false_alarm\": true\n      \"device\": {\n        \"imei\": \"123456789012345\",\n        \"phone_number\": \"+31612345678\",\n        \"connection_number\": \"CN001\",\n        \"user\": {\n          \"name\": \"Jan Jansen\"\n        }\n      },\n      \"caregivers_en_route\": \"Piet Pietersen, Klaas Klaassen\"\n    }\n  ],\n  \"links\": {\n    \"first\": \"http://example.com/api/device-alarms?page=1\",\n    \"last\": \"http://example.com/api/device-alarms?page=1\",\n    \"prev\": null,\n    \"next\": null\n  },\n  \"meta\": {\n    \"current_page\": 1,\n    \"from\": 1,\n    \"last_page\": 1,\n    \"path\": \"http://example.com/api/device-alarms\",\n    \"per_page\": 15,\n    \"to\": 1,\n    \"total\": 1\n  }\n}"
      tags:
        - 'Device Alarms'
  '/api/device-alarms/{id}':
    get:
      summary: 'Show details for a specific device alarm'
      operationId: showDetailsForASpecificDeviceAlarm
      description: "Returns the full details of a specific alarm, including triggered alerts,\ndevice and user information, and the list of caregivers en route."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"id\": 42,\n  \"created_at\": \"2025-05-30 12:34:56\",\n  \"triggered_alerts\": \"Valalarm, Noodoproep\",\n  \"false_alarm\": true\n  \"location\" : {\n      \"latitude\": \"51.02323\",\n      \"longitude\": \"5.21212\"\n      \"timestamp\": \"2025-05-30 12:34:56\"\n  }\n  \"device\": {\n    \"imei\": \"123456789012345\",\n    \"phone_number\": \"+31612345678\",\n    \"connection_number\": \"CN001\",\n    \"user\": {\n      \"name\": \"Jan Jansen\"\n    }\n  },\n  \"caregivers_en_route\": \"Piet Pietersen, Klaas Klaassen\"\n}"
      tags:
        - 'Device Alarms'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the alarm.'
        example: 16
        required: true
        schema:
          type: integer
  /api/my-devices:
    get:
      summary: 'Get all devices accessible to the authenticated user'
      operationId: getAllDevicesAccessibleToTheAuthenticatedUser
      description: 'Returns devices the user owns (`own`) and devices they access through caregiving relationships (`caregiving`).'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Devices
  /api/my-devices/own:
    get:
      summary: 'Get devices owned by the authenticated user'
      operationId: getDevicesOwnedByTheAuthenticatedUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Devices
  /api/my-devices/caregiving:
    get:
      summary: 'Get devices accessible through caregiving relationships'
      operationId: getDevicesAccessibleThroughCaregivingRelationships
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Devices
  /api/devices/assign:
    post:
      summary: 'Assign a device to the authenticated user using its phone number'
      operationId: assignADeviceToTheAuthenticatedUserUsingItsPhoneNumber
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Devices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone_number:
                  type: string
                  description: 'The phone number of the device.'
                  example: '+31612345678'
                  nullable: false
                nickname:
                  type: string
                  description: 'optional A nickname for the device.'
                  example: "Grandma's Alarm"
                  nullable: true
              required:
                - phone_number
  '/api/devices/{id}':
    get:
      summary: 'Get a specific device by ID, if user has access'
      operationId: getASpecificDeviceByIDIfUserHasAccess
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Devices
    delete:
      summary: 'Unassign a device from the authenticated user'
      operationId: unassignADeviceFromTheAuthenticatedUser
      description: "This removes the ownership link between the user and the device.\nOnly the device owner can perform this action."
      parameters: []
      responses: {  }
      tags:
        - Devices
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the device.'
        example: 14
        required: true
        schema:
          type: integer
  /api/user/notes:
    get:
      summary: 'Get notes for the authenticated user.'
      operationId: getNotesForTheAuthenticatedUser
      description: ''
      parameters: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Notes retrieved successfully.'
                  count: 1
                  data:
                    -
                      id: 1
                      type: medical
                      content: 'Feeling better.'
                      author_id: 5
                      noteable_id: 5
                      noteable_type: App\Models\User
                      created_at: '2025-05-19T12:00:00Z'
                      updated_at: '2025-05-19T12:00:00Z'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Notes retrieved successfully.'
                  count:
                    type: integer
                    example: 1
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        type: medical
                        content: 'Feeling better.'
                        author_id: 5
                        noteable_id: 5
                        noteable_type: App\Models\User
                        created_at: '2025-05-19T12:00:00Z'
                        updated_at: '2025-05-19T12:00:00Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        type:
                          type: string
                          example: medical
                        content:
                          type: string
                          example: 'Feeling better.'
                        author_id:
                          type: integer
                          example: 5
                        noteable_id:
                          type: integer
                          example: 5
                        noteable_type:
                          type: string
                          example: App\Models\User
                        created_at:
                          type: string
                          example: '2025-05-19T12:00:00Z'
                        updated_at:
                          type: string
                          example: '2025-05-19T12:00:00Z'
      tags:
        - Notes
    post:
      summary: 'Store a new note for the authenticated user.'
      operationId: storeANewNoteForTheAuthenticatedUser
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"status\": \"success\",\n  \"message\": \"Note created successfully.\",\n  \"data\": { \"id\": 2, \"type\": \"medical\", \"content\": \"I feel dizzy today.\", ... }\n}"
      tags:
        - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: ''
                  example: medical
                  nullable: false
                content:
                  type: string
                  description: ''
                  example: 'I feel dizzy today.'
                  nullable: false
                anonymous:
                  type: boolean
                  description: optional
                  example: true
                  nullable: false
              required:
                - content
  '/api/user/notes/{note_id}':
    put:
      summary: 'Update an existing note of the authenticated user.'
      operationId: updateAnExistingNoteOfTheAuthenticatedUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"status\": \"success\",\n  \"message\": \"Note updated successfully.\",\n  \"data\": { \"id\": 5, \"type\": \"general\", \"content\": \"Updated note content.\", ... }\n}"
      tags:
        - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: ''
                  example: general
                  nullable: false
                content:
                  type: string
                  description: ''
                  example: 'Updated note content.'
                  nullable: false
              required:
                - content
    delete:
      summary: 'Delete a note owned by the authenticated user.'
      operationId: deleteANoteOwnedByTheAuthenticatedUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Note deleted successfully.'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Note deleted successfully.'
      tags:
        - Notes
    parameters:
      -
        in: path
        name: note_id
        description: 'The ID of the note.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: note
        description: 'The ID of the note.'
        example: 5
        required: true
        schema:
          type: integer
  /api/push-tokens:
    post:
      summary: 'Register or update a push token for the authenticated user.'
      operationId: registerOrUpdateAPushTokenForTheAuthenticatedUser
      description: "This endpoint is called by the mobile app after receiving a push token from FCM.\nIt ensures that the token is stored and linked to the current user, allowing them to receive notifications."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Push token registered successfully.'
                  data:
                    id: 1
                    user_id: 42
                    token: fcm_abc123
                    platform: android
                    app_version: 1.0.0
                    created_at: '2025-06-14T12:34:56.000000Z'
                    updated_at: '2025-06-14T12:34:56.000000Z'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Push token registered successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      user_id:
                        type: integer
                        example: 42
                      token:
                        type: string
                        example: fcm_abc123
                      platform:
                        type: string
                        example: android
                      app_version:
                        type: string
                        example: 1.0.0
                      created_at:
                        type: string
                        example: '2025-06-14T12:34:56.000000Z'
                      updated_at:
                        type: string
                        example: '2025-06-14T12:34:56.000000Z'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The token field is required.'
                  errors:
                    token:
                      - 'The token field is required.'
                properties:
                  message:
                    type: string
                    example: 'The token field is required.'
                  errors:
                    type: object
                    properties:
                      token:
                        type: array
                        example:
                          - 'The token field is required.'
                        items:
                          type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'An error occurred while registering the push token.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'An error occurred while registering the push token.'
      tags:
        - 'Push Notifications'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The push token from FCM.'
                  example: fcm_abc123
                  nullable: false
                platform:
                  type: string
                  description: 'The platform of the device.'
                  example: android
                  nullable: true
                app_version:
                  type: string
                  description: 'The version of the app.'
                  example: 1.0.0
                  nullable: true
              required:
                - token
    delete:
      summary: 'Delete a push token for the authenticated user.'
      operationId: deleteAPushTokenForTheAuthenticatedUser
      description: 'This is typically called when the user logs out or disables notifications on the device.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Push token deleted successfully.'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Push token deleted successfully.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'No matching token found for user.'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'No matching token found for user.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The token field is required.'
                  errors:
                    token:
                      - 'The token field is required.'
                properties:
                  message:
                    type: string
                    example: 'The token field is required.'
                  errors:
                    type: object
                    properties:
                      token:
                        type: array
                        example:
                          - 'The token field is required.'
                        items:
                          type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'An error occurred while deleting the push token.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'An error occurred while deleting the push token.'
      tags:
        - 'Push Notifications'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The push token to delete.'
                  example: fcm_abc123
                  nullable: false
              required:
                - token
  /api/user:
    get:
      summary: "Show the authenticated user's information."
      operationId: showTheAuthenticatedUsersInformation
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - User
    put:
      summary: "Update the authenticated user's profile information."
      operationId: updateTheAuthenticatedUsersProfileInformation
      description: ''
      parameters: []
      responses: {  }
      tags:
        - User
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "optional The user's name."
                  example: John
                  nullable: false
                email:
                  type: string
                  description: 'optional Unique email.'
                  example: john@example.com
                  nullable: false
                phone_number:
                  type: string
                  description: 'optional Phone number.'
                  example: '+31612345678'
                  nullable: false
    delete:
      summary: "Delete the authenticated user's account."
      operationId: deleteTheAuthenticatedUsersAccount
      description: ''
      parameters: []
      responses: {  }
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: "The user's password."
                  example: pass123
                  nullable: false
              required:
                - password
  /api/user/password:
    put:
      summary: "Update the authenticated user's password."
      operationId: updateTheAuthenticatedUsersPassword
      description: ''
      parameters: []
      responses: {  }
      tags:
        - User
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: required.
                  example: oldpass123
                  nullable: false
                new_password:
                  type: string
                  description: required.
                  example: newpass456
                  nullable: false
                new_password_confirmation:
                  type: string
                  description: required.
                  example: newpass456
                  nullable: false
  /api/user/caregivers:
    get:
      summary: 'Get all caregivers for the authenticated user.'
      operationId: getAllCaregiversForTheAuthenticatedUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - User
  /api/user/patients:
    get:
      summary: 'Get all patients the authenticated user cares for.'
      operationId: getAllPatientsTheAuthenticatedUserCaresFor
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - User
  /api/user/caregivers/update:
    post:
      summary: 'Update caregiver priorities.'
      operationId: updateCaregiverPriorities
      description: ''
      parameters: []
      responses: {  }
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                caregivers:
                  type: array
                  description: ''
                  example:
                    - qui
                  items:
                    type: string
              required:
                - caregivers
tags:
  -
    name: Authentication
    description: "\nUser registration for mobile/API clients."
  -
    name: Caregivers
    description: "\nManage caregiver-patient relationships."
  -
    name: 'Device Alarms'
    description: "\nRetrieve relevant alarms triggered by devices."
  -
    name: Devices
    description: "\nEndpoints for managing and viewing devices."
  -
    name: Notes
    description: ''
  -
    name: 'Push Notifications'
    description: ''
  -
    name: User
    description: "\nEndpoints for managing the authenticated user's profile, caregivers, and patients."
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
